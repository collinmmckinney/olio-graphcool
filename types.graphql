type User @model {
    # Required system field:
    id: ID! @isUnique # read-only (managed by Graphcool)

    createdAt: DateTime! # read-only (managed by Graphcool)
    updatedAt: DateTime! # read-only (managed by Graphcool)

    email: String! @isUnique
    username: String!
    password: String!
    firstName: String
    middleName: String
    lastName: String
    dateOfBirth: DateTime
    pronoun: Pronoun
    town: String
    state: String

    patient: Patient @relation(name: "PatientUser")
    caregiver: Caregiver @relation(name: "CaregiverUser")
    doctor: Doctor @relation(name: "DoctorUser")
    userType: UserType!

    mapItems: [MapItem!]! @relation(name: "UserMapItems")
}

enum UserType {
    Patient,
    Caregiver,
    Doctor
}

enum Pronoun {
    He,
    She,
    They
}

enum AllergenType {
    Bees,
    Pollen,
    Animals,
    Insects,
    Mold,
    Peanut,
    Smoke,
    Other
}

type Patient @model {
    id: ID! @isUnique
    user: User! @relation(name: "PatientUser")
    caregiver: [Caregiver!]! @relation(name: "PatientCaregivers")
    doctor: [Doctor!]! @relation(name: "PatientDoctors")
    allergens: [Allergen!]! @relation(name: "PatientAllergens")
    medications: [Medication!]! @relation(name: "PatientMedications")
    reports: [Report!]! @relation(name: "PatientReports")
}

type Caregiver @model {
    id: ID! @isUnique
    user: User! @relation(name: "CaregiverUser")
    patient: [Patient!]! @relation(name: "PatientCaregivers")
    doctor: [Doctor!]! @relation(name: "CaregiverDoctors")
}

type Doctor @model {
    id: ID! @isUnique
    user: User! @relation(name: "DoctorUser")
    patients: [Patient!]! @relation(name: "PatientDoctors")
    caregiver: [Caregiver!]! @relation(name: "CaregiverDoctors")
}

type Report @model {
    id: ID! @isUnique
    patient: Patient! @relation(name: "PatientReports")
    createdAt: DateTime!
    updatedAt: DateTime!
    fev1: Float
    fvc: Float
}

type Allergen @model {
    id: ID! @isUnique
    patient: Patient! @relation(name: "PatientAllergens")
    type: AllergenType!
    name: String
    severity: Int
    comment: String
}

type Medication @model {
    id: ID! @isUnique
    patient: Patient! @relation(name: "PatientMedications")
    name: String!
    type: String
}

type MapItem @model {
    id: ID! @isUnique
    user: User! @relation(name: "UserMapItems")
    createdAt: DateTime!
    updatedAt: DateTime!
    latitude: Float!
    longitude: Float!
    allergenType: AllergenType!
    comment: String
}
